{
  "noir_version": "0.38.0+e784523a15c0c233a5a794f28498635b7ce86325",
  "hash": 8871904291781472358,
  "abi": {
    "parameters": [
      { "name": "root", "type": { "kind": "field" }, "visibility": "public" },
      { "name": "index", "type": { "kind": "field" }, "visibility": "private" },
      {
        "name": "path",
        "type": { "kind": "array", "length": 13, "type": { "kind": "field" } },
        "visibility": "private"
      },
      {
        "name": "pub_key_x",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_y",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "signature",
        "type": {
          "kind": "array",
          "length": 64,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "message_hash",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "data_hash",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 32,
        "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "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",
  "debug_symbols": "7Z3dahtNDIbvxcc5GGk0f7mVj1KcxCkGY4fE+aCE3Hsd12u7ZEkPpmhfVjp0PFmkJ0HvI8Ou3xYPq7vXH9/X28fdy+L2v7fFZne/3K9328OrtwU1Pv7w5Wm5/Xj9sl8+7xe3UtrNYrV9WNwmye83i8f1ZrW4ze395tNRTul0lD/ePx0tYeQohZZPZ4lquhym9283h1Livyul5etSjleXzqtHktPRGPkvjcZYh0bjoburRkeuW2mgEmsu58Ncx65c6XzlGi9X5vK7yWShyWyhyWKhyWqhyTb/JjkEC02ShSbZQpPRQpNioUkDxsPBgPFwMGA8HAwYDwcLxkMWjIcsGA9ZMB6yYDwkFpq0YDxkwXjIgvGQBeMhC8bDFoyHLRgPWzAetmA8LBaatGA8bMF42ILxsAXjYQvGEy0YT7RgPNGC8UQLxhPFQpMWjCdaMJ5owXiiBeOJFoxHLBiPWDAesWA8YsF4RCw0acF4xILxiAXjEQvGIxaMJ1kwnmTBeJIF40kWjCeJhSYtGE+yYDzJgvEkC8aTLBhPtmA82YLxZAvGky0YTxYLTVownmzBeLIF48kWjCdbMJ5iwXiKBeMpFoynWDCeInNokmsaDnMt8qnJWRhPjBQuVeTrJkeItHh5ClO6+rPnkcMpVBpQhNauDx/xzcKlpsM3C0ubDt8s/G86fLMwy8nw1Vk463T4ZmHD0+GbhWdPh28WBj8dPnF8Pfh86+jC51tHFz7fOrrw+dbRhc+3jh58zbeOLny+dXTh862jC59vHV34xPH14POtowufbx1d+Hzr6MLnW0cXPt86OvDFeXx7xHT4fOvowudbRxc+3zq68Inj68HnW0cXPt86uvD51tGFz7eOLny+dfTgm8c3uEyHz7eOLny+dXTh862jC584vh58o1tHDuX0O5nD1/gkD0ikXpqsY/iyDGXnHC/w0u9CMkohBaWQilJIAylk/HtbpiiEUAphlEIiSiGCUgjKZGWUycook5VRJiujTNaoOFlLHdysBvpUCKEUwiiFKE7WFgZXbNQ+FSIohSSUQhQnK4UYh90j5D/+S0YOn+/lpqvrjq8/bWhQrtafGMf2jsrD/ylXiV8fplrPNbSQ/nKYzlcmKvX68JFzcc4qnKtzVuHcnLMGZwnOWYUzirQJirRJRClEQFxJUKRNMkohbjU608mtRoezW40K54TyWU1Cif2EEvsJ5bOahBL7CSX2k39WozOd3Gp0OLvV6HBuINmSUWI/o8R+ZpBsySixn1FiPyefThrTKbvV6HB2q9HhXFGyBSX2C0rsFwLJloIS+wUl9ov4dNKYTsWtRoezW40O54KSLSixX1BivwaQbKkosV9RYr9Gn04a06m61ehwdqvR4ZxRsgUl9itK7NcGki0NJfYbSuw39umkMZ2aW40OZ3HOKpwTSLY0lNhvKLHfKkq2gMS+BJDYl0A+nRSmkwS3Gh3ObjU6nAUjWySAxL4EkNiXUFCyBST2JaDEPvn9iSrTidxqdDi71ehwBrm7VAgl9gkl9gnk7lIhlNgnlNgnvz9RZTqxW40OZ7caHc4gd5cKo8S+5jMWvy4E5O5SYZTYZ5TYZ78/UWc6udWocI5uNTqcQe4uFZQHgEpEiX2UB4AKygNAJaLEvj8hU2k6udXocHarUeEsIHeXCsojJAXlEZIiIHeXCsojJAXlEZIifn+iznRyq9Hh7Fajw7nXalIcviUsyR+cvx1e3D2vN5v1j++b3f1yv95tXw6/ePjx/8vn9fJuszq9fHzd3l+9u//5NLwz/P7T8+5+9fD6vPq40vG9w+V/AQ==",
  "file_map": {
    "26": {
      "source": "pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "27": {
      "source": "use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n",
      "path": "std/hash/keccak.nr"
    },
    "28": {
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "33": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "69": {
      "source": "use dep::std::hash::poseidon2::Poseidon2::hash;\nuse ecrecover;\nuse merkle_tree::merkle::MerkleTree;\n\nfn poseidon2_hasher(leaves: [Field; 2]) -> Field {\n    hash([leaves[0], leaves[1]], 2)\n}\n\nfn main(\n    // Tree Data\n    root: pub Field,\n    index: Field,\n    path: [Field; 13],\n    // Signature Data\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    // Data\n    data_hash: [u8; 32],\n) -> pub [u8; 32] {\n    let address = ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash);\n    let mt = MerkleTree::from(root, poseidon2_hasher);\n    mt.membership(address, index, path);\n\n    (data_hash)\n}\n",
      "path": "/Users/kartik/projects/anoncast/packages/zk/circuits/permissioned-action/src/main.nr"
    },
    "70": {
      "source": "use dep::std;\n \nmod secp256k1;\n\nfn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32]\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/kartik/projects/anoncast/packages/zk/circuits/ecrecover-noir/src/lib.nr"
    },
    "71": {
      "source": "use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(\n    pub_key: [u8; 65]\n) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    };\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey {\n            pub_x,\n            pub_y,\n        }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey {\n            pub_x: key_x,\n            pub_y: key_y,\n        }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(\n        self,\n        signature: [u8; 64],\n        hashed_message: [u8; 32]\n    ) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223, 198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117];\n    let pub_key_y = [53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99, 12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165];\n    let signature = [57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82, 71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213, 80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23, 136, 75, 29, 177];\n    let hashed_message = [13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112, 68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n",
      "path": "/Users/kartik/projects/anoncast/packages/zk/circuits/ecrecover-noir/src/secp256k1.nr"
    },
    "75": {
      "source": "use crate::merkle::MerkleTree;\nuse crate::Calculator;\n\n/*\n * Transforms the key into into a big endian array of bits so that when determining the position\n * of a tree entry starting from the root node, the first array element to look at is the last.\n * @param key The key of a tree entry\n * @returns The path that determines the position of a key in the tree\n */\npub fn key_to_path(key: Field) -> [u1] {\n    key.to_be_bits()\n}\n\nimpl Calculator<Field> for MerkleTree {\n    fn calculate_root<let N: u32>(\n        self,\n        leaf: Field,\n        indexes: Field,\n        hash_path: [Field; N],\n    ) -> Field {\n        let index_bits: [u1; N] = indexes.to_le_bits();\n        let mut node = leaf;\n        for i in 0..hash_path.len() {\n            let sibling = hash_path[i];\n            if sibling != 0 {\n                let mut left = sibling;\n                let mut right = node;\n                if index_bits[i] == 0 {\n                    left = node;\n                    right = sibling;\n                }\n                node = (self.hasher)([left, right]);\n            }\n        }\n        node\n    }\n\n    /*\n     * Calculates two roots for a given leaf entry based on the passed array of siblings: one root\n     * for if the leaf entry was included in the tree and one for if the leaf entry was not included\n     * in the tree. This is useful for efficiently proving the membership of leaf entries for a\n     * tree while simultaneously modifying the tree.\n     * @param entry The key and value of an entry [k, v]\n     * @param siblings Contains the siblings from bottom to top\n     * @returns Two root nodes: the first one doesn't include entry, the second does\n     */\n    fn calculate_two_roots<let N: u32>(\n        self,\n        leaf: Field,\n        indexes: Field,\n        hash_path: [Field; N],\n    ) -> (Field, Field) {\n        let index_bits: [u1; N] = indexes.to_le_bits();\n\n        let mut root_with_leaf = leaf;\n        let mut root_without_leaf = 0;\n\n        for i in 0..hash_path.len() {\n            let sibling = hash_path[i];\n\n            if (sibling != 0) {\n                if i == hash_path.len() - 1 {\n                    root_without_leaf = hash_path[i];\n                }\n\n                if (index_bits[i] == 0) {\n                    root_with_leaf = (self.hasher)([root_with_leaf, sibling]);\n\n                    if (root_without_leaf != sibling) {\n                        root_without_leaf = (self.hasher)([root_without_leaf, sibling]);\n                    }\n                } else {\n                    root_with_leaf = (self.hasher)([sibling, root_with_leaf]);\n                    if (root_without_leaf != sibling) {\n                        root_without_leaf = (self.hasher)([sibling, root_without_leaf]);\n                    }\n                };\n            }\n        }\n        (root_without_leaf, root_with_leaf)\n    }\n}\n",
      "path": "/Users/kartik/nargo/github.com/privacy-scaling-explorations/zk-kit.noirmain/packages/merkle-trees/src/merkle/tree.nr"
    },
    "80": {
      "source": "use crate::{MembershipProver, Modifier, MT_Creator};\nmod tests;\nmod tree;\n\nstruct MerkleTree {\n    hasher: fn([Field; 2]) -> Field,\n    pub root: Field,\n}\n\nimpl MT_Creator for MerkleTree {\n    fn default(root: Field, hasher: fn([Field; 2]) -> Field) -> Self {\n        Self { root, hasher }\n    }\n}\n\nimpl MembershipProver<Field, Field, Field> for MerkleTree {\n    fn membership<let N: u32>(self, leaf: Field, indexes: Field, hash_path: [Field; N]) {\n        let root = self.calculate_root(leaf, indexes, hash_path);\n        assert(self.root == root);\n    }\n}\n\nimpl Modifier<Field, Field, Field> for MerkleTree {\n    fn add<let N: u32>(&mut self, leaf: Field, indexes: Field, hash_path: [Field; N]) {\n        let (old, new) = self.calculate_two_roots(leaf, indexes, hash_path);\n\n        assert(old == self.root);\n        self.root = new;\n    }\n\n    fn delete<let N: u32>(&mut self, leaf: Field, indexes: Field, hash_path: [Field; N]) {\n        let (new, old) = self.calculate_two_roots(leaf, indexes, hash_path);\n        assert(old == self.root);\n        self.root = new;\n    }\n\n    fn update<let N: u32>(\n        &mut self,\n        leaf: Field,\n        old_leaf: Field,\n        indexes: Field,\n        hash_path: [Field; N],\n    ) {\n        let index_bits: [u1; N] = indexes.to_le_bits();\n\n        let mut old_parent: Field = old_leaf;\n        let mut new_parent: Field = leaf;\n\n        for i in 0..hash_path.len() {\n            let sibling = hash_path[i];\n            if sibling != 0 {\n                if index_bits[i] == 0 {\n                    new_parent = (self.hasher)([new_parent, sibling]);\n                    old_parent = (self.hasher)([old_parent, sibling]);\n                } else {\n                    new_parent = (self.hasher)([sibling, new_parent]);\n                    old_parent = (self.hasher)([sibling, old_parent]);\n                }\n            }\n        }\n        assert(old_parent == self.root);\n        self.root = new_parent;\n    }\n}\n",
      "path": "/Users/kartik/nargo/github.com/privacy-scaling-explorations/zk-kit.noirmain/packages/merkle-trees/src/merkle.nr"
    }
  },
  "names": ["main"],
  "brillig_names": ["directive_integer_quotient", "directive_invert"]
}
